{"version":3,"sources":["config/firebase/index.js","containers/pages/Dashboard/index.js","config/redux/action/index.js","components/atoms/Button/index.js","components/atoms/Status/index.js","containers/pages/Login/index.js","containers/pages/Register/index.js","config/redux/reducer/index.js","config/redux/store/index.js","containers/pages/App/index.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Dashboard","state","title","content","date","textButton","noteId","handleSaveNotes","props","saveNotes","updateNotes","userData","JSON","parse","localStorage","getItem","data","Date","getTime","userId","uid","alert","console","log","onInputChange","e","type","setState","target","value","note","id","cancelUpdate","deleteNote","stopPropagation","window","confirm","keluarNote","history","removeItem","push","this","getNotes","notes","loadingContent","className","onClick","placeholder","onChange","length","map","key","Component","connect","user","dispatch","ref","addDataToAPI","urlNotes","Promise","berhasil","gagal","on","snapshot","val","Object","keys","set","err","upadateDataAPI","remove","deleteDataAPI","Botton","loading","disabled","Status","status","StatusLogin","Login","email","password","handleChangeText","handleLoginSubmit","a","loginAPI","catch","res","setItem","stringify","Button","isLoading","style","textDecoration","to","auth","signInWithEmailAndPassword","then","dataUser","emailVerified","refreshToken","error","errorCode","code","errorMessage","message","loginUserAPI","Register","handleRegisterSubmit","registerAPI","createUserWithEmailAndPassword","registerUserAPI","initialState","popup","isLogin","reducer","action","store","createStore","applyMiddleware","thunk","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a4b3029.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDBwcd3AQ7zZ4R4U3y9LpOTJVVvlxV8LAk\",\n    authDomain: \"cawaapps.firebaseapp.com\",\n    databaseURL: \"https://cawaapps.firebaseio.com\",\n    projectId: \"cawaapps\",\n    storageBucket: \"cawaapps.appspot.com\",\n    messagingSenderId: \"115825543646\",\n    appId: \"1:115825543646:web:f3ee2b828e7b4a9bd8b54f\",\n    measurementId: \"G-R1MFYQVK00\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n//   firebase.analytics();\n// deklarasi databse\n//diimport di halaman action\nexport const database = firebase.database();\nexport default firebase;","import React , {Component,Fragment} from 'react';\nimport './Dashboard.scss';\nimport { connect } from 'react-redux';\nimport {addDataToAPI, getDataFromAPI , upadateDataAPI , deleteDataAPI} from '../../../config/redux/action';\nclass Dashboard extends Component {\n    state = {\n        title : '',\n        content : '',\n        date : '',\n        textButton: 'SIMPAN',\n        noteId: ''\n    }\n    //mengambil data\n    componentDidMount(){\n        //data id yang akan dikirmkan ke database diambil dr localstorage\n        const {history} = this.props;\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        // fungsi diambil dari bawah fungsi di baris 152\n        if(userData === null){\n            history.push('/');\n        }else{\n            this.props.getNotes(userData.uid);\n        }\n    }\n    // data akan di tampilkan setelah render selasai\n    handleSaveNotes = () => {\n        // menerima data dari staete diatas\n        const {title,content , textButton , noteId} = this.state;\n        // menerima data dari props redux dibawah\n        const {saveNotes , updateNotes} = this.props;\n        //userData dari datanya di panggil dari localstorage\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        // simpan data dalam bentuk obejek\n        const data = {\n            title: title,\n            content: content,\n            date : new Date().getTime(),\n            userId : userData.uid\n        }\n        if(textButton === 'SIMPAN'){\n            // savenotes merupakan fungsi redux yan ada di bawah, yang akan mengirimkan data ke halaman action di fungsi addToAPI yang di panggil leat redux yang fungsinya berada di bawah\n          if(title && content){\n            saveNotes(data)\n          }else{\n              alert('gagal')\n          }\n        }else{\n            // sama kaya yang diatas\n            data.noteId = noteId; //cara mensisipkan data\n            updateNotes(data);\n\n        }\n        console.log('nilai data => ',data);\n    }\n    onInputChange = (e,type) => {\n        this.setState({\n            [type] : e.target.value\n        })\n    }\n    //update notes\n    updateNotes  = (note) => {\n        console.log(note);\n        this.setState({\n            title: note.data.title,\n            content: note.data.content,\n            textButton: 'UPDATE',\n            noteId: note.id\n        })\n    }\n    //cancel update\n    cancelUpdate = () => {\n        this.setState({\n            title: '',\n            content: '',\n            textButton: 'SIMPAN'\n        })\n    }\n    // hapus note\n    // delete note yang ini dari onlclick di baris ke 116\n    // mengirimkan e agar data si child tidak ikut parent\n    deleteNote = (e ,note) => {\n        e.stopPropagation();\n        const confirmasi =  window.confirm('Data Akan di Hapus Permanaen!!');\n        //deleteNote yang ini dari fungsi redux di halaman 145\n        if(confirmasi){\n            const {deleteNote} = this.props;\n            const userData = JSON.parse(localStorage.getItem('userData'));\n            const data = {\n                userId: userData.uid,\n                noteId: note.id\n            }\n            // deleteNote akan mngirimkan data ke halaman action melalui redux di bawah bari ke 143\n            // data berupa id data yang akan di hapus\n            deleteNote(data);\n        }\n    }\n    // keluar note\n    keluarNote = () => {\n        const {history} = this.props;\n        localStorage.removeItem(\"userData\");\n        history.push('/');\n    }\n    render (){\n        const { title , content , textButton} = this.state;\n        const {notes,loadingContent} = this.props;\n        const {updateNotes,cancelUpdate , deleteNote ,keluarNote}  = this;\n        console.log('data notes : ' ,notes);\n        console.log('loading content => ',loadingContent);\n        return (\n            <div className=\"container\">              \n                {/* removeItem = () => localStorage.removeItem(\"name\") */}\n                {/* e sebagai penanda seperti id atau name */}\n                <div className=\"keluar-note\" onClick={keluarNote}><p className=\"text-keluar\">Keluar</p></div>\n                <div className=\"input-form\" >\n                    <input placeholder=\"title\" className=\"input-title\" value={title} onChange={(e) => this.onInputChange(e,'title')} />\n                    <textarea placeholder=\"content\" className=\"input-title\" value={content} onChange={(e) => this.onInputChange(e,'content')}>\n                    </textarea>\n                    <div className=\"action-wrap\">\n                        {\n                            textButton === 'UPDATE' ? (\n                                <button className=\"save-btn cancel\" onClick={this.handleSaveNotes} onClick={cancelUpdate} >Cancel</button>\n                            ) : <div/>\n                        }\n                    <button className=\"save-btn\" onClick={this.handleSaveNotes}>{textButton}</button>\n                    </div>\n                </div>\n                <hr/>\n                {/* meloping nilai dari firebase */}\n                {\n                    loadingContent?\n                    <div>\n                        <h2>loading ...</h2>\n                    </div>\n                    :// sama dengan percabangan\n                    notes.length > 0 ? (\n                        <Fragment>\n                            {\n                                notes.map(note => {\n                                    return (\n                                        <div className=\"card-content\" key={note.id} onClick={ () => updateNotes(note)}>\n                                            <p className=\"title\">{note.data.title}</p>\n                                            <p className=\"date\">{note.data.date}</p>\n                                            <p className=\"content\">{note.data.content}</p>\n                                            <div className=\"delete-btn\" onClick={ (e) => deleteNote(e ,note)}>X</div>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </Fragment>\n                        ) : <p>kosong ..</p>\n                }\n            </div>\n        )\n    }\n}\n//menggunakan redux\n// untuk mendaptakn data hasil login\nconst reduxState = (state) => ({\n    //nilai state.user dari reducer\n    userData : state.user,\n    //nilai state.notes dari reducer yang telah diubah dari halaman action di baris ke 93 dan dapnngikl dari state global redux di halaman reducer\n    notes : state.notes,\n    loadingContent: state.loadingContent\n})\nconst reduxDispatch = (dispatch) => ({\n    // fungsi addDataToAPI dari halaman action yang dikirim lwat redux\n    saveNotes : (data) => dispatch(addDataToAPI(data)),\n    // mnerima data dari halaman action dengan redux\n    // mengirimkan data yaitu userId dari localstroge yang diambil dari fungsi diatas\n    getNotes: (data) => dispatch(getDataFromAPI(data)),\n    updateNotes: (data) => dispatch(upadateDataAPI(data)),\n    // deleteNote di panggil diatas dan deleteDataAPI dari halaman action\n    deleteNote: (data) => dispatch(deleteDataAPI(data))\n})\nexport default connect(reduxState,reduxDispatch)(Dashboard);","import firebase,{database} from '../../firebase/';\nexport const actionUsername = () => (dispatch) => {\n    // asyncronus\n        setTimeout(()=> {\n            return dispatch({type: 'CHANGE_USER',value: 'Yudi Gunawan'});\n        },2000);\n}\n// akan di panggil di halaman register\nexport const registerUserAPI = (data) => (dispatch) => {\n    dispatch({type: 'CHANGE_STATUS', value: null})\n    // code yang ada di bawah mengubah value dan melakukan action yang ada dihalaman register\n    // parameter disini di tangkap oleh fungsi yanga ada di register dengan reduxstate dan reduxdispatch\n    //promise ini akan di tunggu data peniriman data oleh halaman register\n    return new Promise((berhasil,gagal) => {\n        dispatch({type: 'CHANGE_LOADING', value: true})\n        // menerima data dari halaman register dan menfirimkan ke firebase\n        firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\n        .then(res => {\n            console.log('Berhasil => ',res);\n            dispatch({type: 'CHANGE_LOADING', value: false})\n            dispatch({type: 'CHANGE_STATUS', value: true})\n            berhasil(true);\n        })\n        .catch(function(error) {\n            // Handle Errors here.\n            var errorCode = error.code;\n            var errorMessage = error.message;\n            console.log(errorCode , errorMessage);\n            dispatch({type: 'CHANGE_LOADING', value: false})\n            dispatch({type: 'CHANGE_STATUS', value: false})\n            gagal(false)\n            // ...\n        })\n    })\n}\n// akan di panggil di halaman login\nexport const loginUserAPI = (data) => (dispatch) => {\n    dispatch({type: 'CHANGE_STATUS', value: null})\n    // code yang ada di bawah mengubah value dan melakukan action yang ada dihalaman register\n    // parameter disini di tangkap oleh fungsi yanga ada di register dengan reduxstate dan reduxdispatch\n    //promise ini untuk fungsi asyncronus yang akan diterima di hhalaman loginn\n    return new Promise((berhasil, gagal) => {\n        dispatch({type: 'CHANGE_LOADING', value: true})\n            firebase.auth().signInWithEmailAndPassword(data.email, data.password)\n            .then(res => {\n                // console.log('Berhasil => ',res);\n                // data yang akan disimpan dari firebase pada saat login\n                //menyimpand data kembalian firebase saat login\n                const dataUser = {\n                    email : res.user.email,\n                    uid : res.user.uid,\n                    emailVerified : res.user.emailVerified,\n                    refreshToken : res.user.refreshToken\n                }\n                dispatch({type: 'CHANGE_LOADING', value: false})\n                dispatch({type: 'CHANGE_LOGIN', value: true})\n                dispatch({type: 'CHANGE_USER', value: dataUser })\n                // berhasil ini akan mengrim data ke halaman login di baris ke 35 ,ke variable res/hasilnya\n                berhasil(dataUser)\n            })\n            .catch(function(error) {\n                // Handle Errors here.\n                var errorCode = error.code;\n                var errorMessage = error.message;\n                console.log(errorCode , errorMessage);\n                dispatch({type: 'CHANGE_LOADING', value: false})\n                dispatch({type: 'CHANGE_LOGIN', value: false})\n                dispatch({type: 'CHANGE_STATUS', value: true})\n                gagal(false)\n                // ...\n            })\n    })\n}\n// mengirim data ke firebase\nexport const addDataToAPI = (data) => (dispatch) => {\n    database.ref('notes/' + data.userId).push({\n        title: data.title,\n        content: data.content,\n        date: data.date\n    })\n}\n//mengambil data dari firebase\n//fungsi ini akan di panggil di halaman dasboar dan didalam fungdi didmount\nexport const getDataFromAPI = (userId) => (dispatch) =>  {\n    const urlNotes = firebase.database().ref('notes/' + userId);\n    // menggunakan fungsi asycncronus\n    return new Promise((berhasil,gagal) => {\n        dispatch({type:'LOADING_CONTENT' , value: true})\n        urlNotes.on('value', function(snapshot) {\n            // updateStarCount(postElement, snapshot.val());\n            console.log('mengambil data : ',snapshot.val());\n            if(snapshot.val()===null){\n            const data = {\n\n                }\n                dispatch({type: 'SET_NOTES' ,value: data})\n                dispatch({type:'LOADING_CONTENT' , value: false})\n            }else{\n                // membuat sebuah objek menjadi array\n                const data = [];\n                // snapshot dari fungsi firebase yang berisi data yang di panggil\n                Object.keys(snapshot.val()).map(key =>{\n                    data.push({\n                        id: key,\n                        data: snapshot.val()[key]\n                    })\n                });\n                // menyimpan di redux dan dikirim ke reducer\n                dispatch({type: 'SET_NOTES' ,value: data})\n                // mengirim lewat fungs promise\n                berhasil(snapshot.val());\n                dispatch({type:'LOADING_CONTENT' , value: false})\n            }\n        });\n    })\n}\n//update data\nexport const upadateDataAPI = (data) => (dispatch) =>  {\n    const urlNotes = firebase.database().ref(`notes/${data.userId}/${data.noteId}`);\n    // menggunakan fungsi asycncronus\n    return new Promise((berhasil,gagal) => {\n        urlNotes.set({\n            title: data.title,\n            content: data.content,\n            date: data.date\n        }, (err) => {\n            if(err){\n                gagal(false);\n            }else{\n                berhasil(true);\n            }\n        });\n    })\n}\n//hapus data API\nexport const deleteDataAPI = (data) => (dispatch) =>  {\n    const urlNotes = firebase.database().ref(`notes/${data.userId}/${data.noteId}`);\n    // menggunakan fungsi asycncronus\n    return new Promise((berhasil,gagal) => {\n        urlNotes.remove();\n    })\n}","import React from 'react';\n// title, onclick dan loading dari register yang kirimkan melalui props\n//loading merupakan props yang ada di tombol button pada register halaman 44\nconst Botton = ({title,onClick, loading}) => {\n    if(loading){\n        return <button className=\"btn disable\" disabled>Loading ...</button>\n    }\n    return (\n        <button className=\"btn\" onClick={onClick}>{ title }</button>\n    )\n}\nexport default Botton;","import React from 'react';\n\nexport const Status = ({status}) => {\n    console.log('status => ',status )\n    if(status){\n        return (\n            <div className=\"alert\"><p>Berhsil Daftar</p></div>\n        )\n    }else if(status===false){\n        return (\n            <div className=\"gagal\"><p>Gagal Daftar</p></div>\n        )\n    }else{\n        return (\n            <div></div>\n        )\n    }\n}\n\n// status dari props login\nexport const StatusLogin = ({status}) => {\n    if(status){\n        return (\n            <div className='login'><p>Login Gagal</p></div>\n        )\n    }else{\n        return (\n            <div></div>\n        )\n    }\n}","import React , {Component} from 'react';\nimport { connect } from 'react-redux';\n// import { actionUsername } from '../../../config/redux/action';\nimport Button from '../../../components/atoms/Button';\nimport { loginUserAPI } from '../../../config/redux/action';\nimport './Login.scss';\nimport { StatusLogin } from '../../../components/atoms/Status';\nimport { Link } from 'react-router-dom'\n\nclass Login extends Component {\n    // changeUser =() => {\n    //     this.props.changeUserName()\n    // }\n    componentDidMount(){\n        const user = localStorage.getItem('userData');\n        const {history} = this.props;\n        if(user != null){\n            history.push('/dashboard');\n        }else{\n            history.push('/');\n        }\n    }\n        \n    state = {\n        email : '',\n        password : '',\n       // isLoading : false\n    }\n    //menerima inputan otomatis dari user\n    handleChangeText = (e) => {\n        // console.log(e.target.id);\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    //pada saat tombol di tekan\n    handleLoginSubmit = async () => {\n        const {email,password} = this.state;\n        const {history} = this.props;\n        console.log('data sebelum dikirim => ',email , password);\n        //props dibawah ini yang akan menerima dat email dan password\n        //await disini menunggu promse dari halaman login\n        const res = await this.props.loginAPI({email,password}).catch(err => err);\n        //mengosongkan form setelah di submit\n        if(res){\n            console.log('login success =>', res);\n            // menyimpan data kedalam localStorage\n            localStorage.setItem('userData', JSON.stringify(res));\n            this.setState({\n                email : '',\n                password : ''\n            })\n            //history bawaan react rooter, data akan dikirm/di redirect kan ke dashboard\n            history.push('/dashboard');\n        }else{\n            console.log('login gagal');\n        }\n        //simulasi\n        // this.setState({\n        //     isLoading : true\n        // })\n        // setTimeout(()=> {\n        //     this.setState({\n        //         isLoading : false\n        //     })\n        // },3000);\n\n    }\n    render (){\n        return (\n            <div className=\"auth-container\">\n                <div className=\"auth-card\">\n                    <p className=\"auth-title\">Halaman Masuk</p>\n                    <input className=\"input\" id=\"email\" placeholder=\"Email\" type=\"text\" onChange= {this.handleChangeText} value={this.state.email} />\n                    <input className=\"input\" id=\"password\" placeholder=\"Password\" type=\"password\" onChange = {this.handleChangeText} value={this.state.password} />\n                    {/* onClick, loading dan title props yang dikrim ke atom button */}\n                    <StatusLogin status={this.props.status} />\n                    <Button onClick={this.handleLoginSubmit} title=\"Login\" loading={this.props.isLoading} />\n                    <Link style={{textDecoration:'none'}} to=\"/register\"><p className=\"text-registrasi\">REGISTRASI</p></Link>\n                </div>\n                {/* <button>Dashboard</button> */}\n            </div>\n        )\n    }\n}\n// const reduxState = (state) => ({\n//     popupProps : state.popup,\n//     userName : state.user\n// })\n// const reduxDispatch = (dispatch) => ({\n//     changeUserName : () => dispatch(actionUsername())\n// })\n// menerim data dari state reducer\nconst reduxState = (state) => ({\n    isLoading: state.isLoading,\n    status : state.status\n})\nconst reduxDispatch = (dispatch) => ({\n    loginAPI: (data) => dispatch(loginUserAPI(data))\n})\nexport default connect(reduxState , reduxDispatch)(Login);","import React , {Component} from 'react';\n// import firebase from '../../../config/firebase';\nimport Button from '../../../components/atoms/Button';\nimport './Register.scss';\nimport { connect } from 'react-redux';\nimport { registerUserAPI } from '../../../config/redux/action';\nimport {Status} from '../../../components/atoms/Status';\nimport { Link } from 'react-router-dom'\nclass Register extends Component {\n    //inisasi dan menampung datadari inputan\n    state = {\n        email : '',\n        password : '',\n       // isLoading : false\n    }\n    handleChangeText = (e) => {\n        // console.log(e.target.id);\n        // setState ini akan mengupdate nilai yang ada di state yang nilainya dari iniputan penggunan\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n    handleRegisterSubmit = async () => {\n        // setelah state di update lalu dipanggil saat mengclick tombol submit\n        const {email,password} = this.state;\n        console.log('data sebelum dikirim => ',email , password);\n        //props dibawah ini yang akan menerima dat email dan password\n        //await menungg data yang ada di halaman action register yaitu promise yang bersifta syncronus\n        // mengirimkan data ke halaman action\n        const res = await this.props.registerAPI({email,password})\n        .catch(err => err);\n        if(res){\n            //mengosongkan form setelah d submit\n            const {history} = this.props;\n            history.push('/');\n            this.setState({\n                email : '',\n                password : ''\n            })\n        }\n        //simulasi\n        // this.setState({\n        //     isLoading : true\n        // })\n        // setTimeout(()=> {\n        //     this.setState({\n        //         isLoading : false\n        //     })\n        // },3000);\n\n    }\n    render (){\n        return (\n            <div className=\"auth-container\">\n                <div className=\"auth-card\">\n                    <p className=\"auth-title\">Register Page</p>\n                    <input className=\"input\" id=\"email\" placeholder=\"Email\" type=\"text\" onChange= {this.handleChangeText} value={this.state.email} />\n                    <input className=\"input\" id=\"password\" placeholder=\"Password\" type=\"password\" onChange = {this.handleChangeText} value={this.state.password} />\n                    {/* onClick, loading dan title props yang dikrim ke atom button */}\n                    <Status status={this.props.status} />\n                    <Button onClick={this.handleRegisterSubmit} title=\"Register\" loading={this.props.isLoading}/>\n                    <Link style={{textDecoration:'none'}} to=\"/\"><p className=\"text-registrasi\">LOGIN</p></Link>\n                    {/* status ini dari bawah reduxSate */}\n                    {/* status yang di import yaitu yang di terapkan ini(Status) status= */}\n                </div>\n                {/* <button>Dashboard</button> */}\n            </div>\n        )\n    }\n}\n// state disini dari initial state yang ada di reducer\nconst reduxState = (state) => ({\n    // ini menggani nilai false menjadi true saat action di jalankan\n    // yang mana actionnya berada di halaman action folder redux yang ada i baris 10\n    //isloadin yaitu prips yang ada di butto di baris ke 44\n    isLoading: state.isLoading,\n    status : state.status\n})\nconst reduxDispatch = (dispatch) => ({\n    // regisgisterUserAPI dari halaman acton redux yang memanggil fungsi firebase\n    // register api di props di fungsi handleRegisterSubmit yang ada diatas dan mengirimkan data yang akan di tangkap  registerUserAPI yang da dibawah ini dan dikirim ke halaman action yang ada di folder redux\n    registerAPI: (data) => dispatch(registerUserAPI(data))\n})\nexport default connect(reduxState,reduxDispatch)(Register);","//redux\n//inistial state\nconst initialState = {\n    popup : false,\n    isLogin : false,\n    isLoading : false,\n    loadingContent: true,\n    status: null,\n    user : {},\n    notes : {}\n    }\n  //reducer (kumpulan instruksi) yang kirimkan oleh dispatch\nconst reducer = ( state=initialState , action ) => {\n    switch(action.type){\n        case 'CHANGE_POPUP':\n        return {\n            ...state,//copy semua state\n            popup : action.value\n        }\n        case 'CHANGE_ISLOGIN' :\n        return {\n            ...state,\n            isLogin : action.value\n        }\n        case 'CHANGE_USER' :\n            return {\n                ...state,\n                user : action.value\n            }\n        case 'CHANGE_LOADING' :\n            return {\n                ...state,\n                isLoading : action.value\n            }\n        case 'CHANGE_STATUS' :\n            return {\n                ...state,\n                status : action.value\n            }\n        case 'SET_NOTES' :\n            return {\n                ...state,\n                notes : action.value\n            }\n        case 'LOADING_CONTENT' :\n            return{\n                ...state,\n                loadingContent: action.value\n            }\n        default : return state;\n    }\n}\n// ini akan di import di halaman store\nexport default reducer;","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducer';\n//store redux\n// applyMiddleware berfungsi sebaga fungsi yang menangani asyncronus\n// strore ini akan di import di halaman config/redux/index.js\nexport const store = createStore(reducer, applyMiddleware(thunk));//di pakai di halaman apps\n// export const store = createStore(reducer);\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\nimport Dashboard from '../Dashboard';\nimport Login from '../Login';\nimport Register from '../Register';\nimport {Provider} from 'react-redux';\nimport {store} from '../../../config/redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div>\n            <Route path='/' exact component={Login} />   \n            <Route path='/dashboard' component={Dashboard} />  \n            <Route path='/register' component={Register} />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/pages/App';\nimport * as serviceWorker from './serviceWorker';\n// import firebase from './config/firebase';\n\n// console.log('fire base = ', firebase);\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}